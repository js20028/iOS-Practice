* 인터뷰 질문
- Scene-Based Life-Cycle
- AppDelegate.swift 파일
- viewController 와 view
- class와 struct의 차이
- HIG(Huanm Interface Guidelines) https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/

아이콘이미지 사이트 - www.flaticon.com

구글에서 이미지 검색할때 도구 - 클립아트, 크리에이티브 커먼즈 라이선스로 바꿔야 저작권에 안걸림 

json 파일 보는 사이트 - codebeautify.org/jsonviewer

공공데이터포털 - www.data.go.kr
서울 열린 데이터 광장 - data.seoul.go.kr
네이버 오픈 API - developers.naver.com/main
카카오개발자서비스 - developers.kakao.com
유튜브 API - https://developers.google.com/youtube/v3/getting-started?hl=ko


-------------------------------------------------------------------------------------------------------------------------------------------------------
<<<<< Xcode 팁 & 오류 >>>>>

* Xcode 자동완성 안될 때
[Preferences] - [Locations] 에서 Derived Data 아래 회색 화살표 누르고 Finder에서 [Derived Data] 폴더 삭제 후 
파일 - 세이브, Xcode 껐다가 재시작 

* Firebase realtime db Cocoapod 설치시 framework not found fblpromises 에러
- use_frameworks! 주석처리 후 use_modular_headers! 입력, pod install --repo-update 로 업데이트 및 클린빌드 후 

* 코드 정렬하기
Editor - Structure - Re-Indent

* Thread 1: ... setValue:forUndefinedKey:]: this class is not key value coding-compliant
- 커넥션 인스펙터에서 연결된 것들 체크하기

* 단축키
- newfile : command + n
- assistant : control + option + command + return
- 줄바꿈 : option + return
- 변수명 일괄변경 : command + controll + e

* 라벨 폰트사이즈 적절하게 알아서 설정하기
라벨 선택 후 Autoshrink - Minimum Font Size

-------------------------------------------------------------------------------------------------------------------------------------------------------

* 아웃렛변수를 쓸때는 weak가 좋음

* 코드로 라벨등을 만들때는 마지막에 view.addSubveiw(a) 를 써야 뷰에 나타남

* UI/UX 사이트 pinterest.co.kr


* compactMap - 배열에서 nil 제거, 옵셔널바인딩해줌, 1차원 배열일때만 가능
flatMap - 2차원배열을 1차원 배열로 flatten하게 만들어줌, 1차원배열일때는 compactMap과 동일한 결과를 냄
ex) 
let array2: [[Int?]] = [[1, 2, 3], [nil, 5], [6, nil], [nil, nil]]
let flatMapTest2 = array2.flatMap { $0 }.compactMap{ $0 }

<출력>
// flatMapTest2 : [1, 2, 3, 5, 6]

* UserDefaults - set 메서드로 데이터 저장, object 메서드로 데이터 로드, object 메서드는 Any 타입으로 리턴됨
		 PropertyListEncoder(), PropertyListDecoder() 로 값을 저장하고 가져올수도 있음
		 
DrinkWater ex)
  guard let data = UserDefaults.standard.value(forKey: "alerts") as? Data,
        var alerts = try? PropertyListDecoder().decode([Alert].self, from: data) else { return }
  UserDefaults.standard.set(try? PropertyListEncoder().encode(alerts), forKey: "alerts")
  

* didSet - 프로퍼티의 값이 변경된 직후에 호출
* willSet - 프로퍼티의 값이 변경되기 직전에 호출

* dictionary

* ns타입 - 대부분 Objective-C의 타입

* repeat while
  repeat {
  // 반복할 코드
  } while 조건
- 처음 한번은 무조건 실행, do while과 유사

* content hugging - 텍스트의 이미지에따라 크기가 결정되는 컨텐츠(버튼, 라벨 등)의 고유크기가 있는데 더 늘어나는것에 대해 저항하는 제약, 우선순위가 낮은것이 늘어남
* content compression resistance - 줄어드는것에 대해 저항하는 제약(압축에대한 저항), 우선순위가 높은것이 크기가 줄어들지않음

* 랜덤함수 
[swift 4.2 이전]
arc4random() -> UInt32 - 0~2^32-1의 범위의 난수 반환
arc4random_uniform(UInt32) -> UInt32 - 파라미터로 넣은 UInt32-1 사이의 난수 리턴
drand48() -> Double - 0부터 1.0 사이의 난수 리턴
arc4random_uniform(5) // 0~4 사이의 난수 랜덤생성, 배열의 인덱스요소에 접근하려면 Int(arc4random_uniform(5))로 사용

[swift 4.2 이후]
Int.rand(in: 0..5) // 0~5사이의 Int난수 생성


* print 함수 - 매개변수로 separator, terminator 생략되어있음
separator : 디폴트는 “ “ 프린트 , 사이에 원하는 문자로 구문가능
terminator : 디폴트는 “\n”


* tuple - 여러 값을 하나의 개체에 일시적으로 묶는방법, 함수에서 여러 값들을 한번에 반환 가능
ex)
빈 튜플은 Void, typealias Void = ()
let myTuple = (10, 12.1, “Hi”) 
튜플의 요소에 접근하려면 myTuple.0  // 10
let (myInt, myFloat, myString) = myTuple // myInt = 10, myFloat = 12.1, myString = “Hi”
let myTuple = (count: 10, length: 12.1, message: “Hi”) // 각 요소에 이름설정가능, 접근할때 myTuple.count 로 가능

* if문에서 ,는 and와 같음 여러 옵셔널변수를 언래핑할수있음

* !로 선언하면 optional로 사용되지 않을때 자동으로 언래핑함

* AnyObject는 클래스타입의 인스턴스 저장가능
  Any는 클래스 포함 어느 자료형도 저장가능

* truncatingRemainder(dividingBy: 나눌 수) 
나머지 값을 구하는 일반적인 방법은 % 이지만, 이는 Int끼리의 계산에만 적용이 가능

---------------------------------------------------------------------------------------------------------------------
* 다른화면으로 데이터 전달하기(segue로 push)
<segue로 push> - 화면이 오른쪽에서 왼쪽으로 생김
버튼에서 Show 선택
뒤로가려면 self.navigationController?.popViewController
루트뷰컨트롤러로 바로 가려면 self.navigationController?.popToRootViewController


다른화면으로 데이터 전달
전달할 페이지에 nameLabel아울렛변수 만들기
var name: String? 프로퍼티 정의
prepare메서드를 뷰컨트롤러에 오버라이드, 이렇게하면 세그웨이를 실행하기 직전에 프리페어 메소드가 자동으로 호출됨
prepare메서드 안에 segue.destination 작성, destination은 전환하려는 뷰컨트롤러의 인스턴스를 가져올수 있음
if let viewController = segue.destination as? SeguePushViewController 로 다운캐스팅 
전달받는 페이지에서 데이터 출력
backbutton은 self.navigationController?.popViewController로 함

<Segue로 Present> - 화면이 밑에서 위로 덮힘
버튼에서 present modally 선택
백버튼은 self.presentingViewController?.dismiss로 함


* 이전화면으로 데이터 전달(delegate 패턴)
let viewController = self.storyboard?.instantiateViewController 로 스토리보드의 뷰컨트롤러를
인스턴스화 시켜야함, 옵셔널로 반환되므로 가드문 사용
self.navigationController?.pushViewController로 화면 푸시

<코드로 present>
let viewController = self.storyboard?.instantiateViewController 로 스토리보드의 뷰컨트롤러를
인스턴스화 시켜야함, 옵셔널로 반환되므로 가드문 사용
self.present(viewController, animated: true, completion: nil) 로 화면 프레젠트
풀스크린은 viewController.modalPresentationStyle = .fullScreen 추가

이전화면으로 데이터 전달
delegate 패턴 사용
root view 컨트롤러에 라벨 추가(nameLabel)
데이터를 넘겨줄 페이지에 프로토콜 정의, AnyObject 상속 sendData(name: String) 함수 정의
weak var delegate: SendDataDelegate? 델리게이트 변수앞에는 weak를 붙여야함
페이지를 dismiss하기 전에 self.delegate?.sendData(name: "abc") 코드 작성
-> 데이터를 전달받은 뷰컨트롤러에서 델리게이트 프로토콜을 채택하고 델리게이트를 위임받으면
    이전화면 뷰컨트롤러에서 정의된 sendData함수가 실행됨
이전화면에서 프레젠트하기 전에 viewController.delegate = self로 초기화하면 델리게이트를 위임받음
이전화면에서 프로토콜을 채택하고 프로토콜을 준수하기위해 정의했던 함수를 작성함 
---------------------------------------------------------------------------------------------------------------------

* ??(Nil-coalescing)
언래핑하고자 하는 옵셔널 값을 ?? nil 병합 연산자 좌측에 놓고, 옵셔널에 값이 없을 때 우측에 대신할 값을 적으면 됨
ex)
if let name = name {
     print("hello, \(name)")
} else {
     print("hello, what's your name?")
}

=> print("hello, " + (name ?? "what's your name?"))
name의 값이 있는경우에는 name의 옵셔널을 언래핑해서 출력하고 nil이면 ?? 우측의 값으로 대체함


* as - 자식인스턴스 as 부모클래스, 서브클래스의 인스턴스를 슈퍼클래스 타입으로 참조, 업캐스팅은 항상 성공함
  상속관계가 있는 클래스들 끼리만 타입캐스팅 가능
* as?, as! - 부모인스턴스 as? or as! 자식클래스, 슈퍼클래스의 인스턴스를 서브클래스 타입으로 참조, 실패할수도있기때문에 ?, !를 붙여서 사용
	실패할경우 nil을 리턴하므로 옵셔널타입으로 선언해야함

* if let 과 다르게 guard let은 선언한 변수를 guard문 밖에서도 쓸수있음

* switch-case 문 + where은 and와 같음
ex)
case 0...49 where num % 2 == 0:
     print("Cold and even")
일치하는 case문을 만나면 자동으로 빠져나옴, case문 다음에 break는 생략
빠져나가지 않고 아래로 계속 내려가게하려면 fallthrough 추가하기


* 함수의 자료형(타입) - (자료형, 자료형,..) -> 리턴형
리턴형이 Void형이면 ()
(Int, Int) -> Int

* 외부매개변수명(argument label)
* 내부매개변수명(parameter name)
func add(first x: Int, second y: Int) -> Int {		// 외부 내부: 자료형, 외부 내부: 자료형 -> 리턴형
     return(x+y)	// 함수를 정의할 때는 내부 매개변수명 사용
}
add(first:10, second:20)	// 함수를 호출할 때는 외부 매개변수명 사용, add(x:10, y:10)은 오류
함수를 정의할때 외부 매개변수명을 생략하면 내부매개변수명이 외부매개변수명까지 겸함


func add(_ x: Int, with y: Int) -> Int {
	return(x+y)
}
첫번째 외부 매개변수만 생략하는 경우가 많음, 두번째 매개변수부터는 외부 매개변수사용, 제일 많이쓰는 방법


* #function - 함수명
함수 내부에 print(#function)을 넣으면 함수명이 출력됨
add(_:with:) :의 수가 매개변수의 수

* 함수를 정의할때 name: String = "aaa" 처럼 디폴트 매개변수를 정할수있음

* 함수의 리턴형으로 튜플을 사용하여 여러개의 결과를 반환할 수 있음
  결과는 변수에 저장해서 변수.a 변수.b 변수.c 로 각각의 요소만 사용할수도 있음

* String(format: "%.3f", result.div) - result.div를 소수점 3자리까지 표시

* 가변매개변수
  ...을 사용하여 여러개의 매개변수를 받을수있음
  ex)
  func aaa(strings: String...)	  // 선언
  aaa(strings: "1", "2", "3")	  // 호출


* inout 매개변수 : call by reference 구현
- 함수가 값을 반환한 후에도 매개변수에 일어난 변화를 유지하려면 함수의 선언부에서 매개변수를 입출력 매개변수로 선언해야함
ex)
var myValue = 10
func doubleValue(value: inout Int) -> Int {	// call by reference 하고싶은 매개변수 앞에 inout 씀
	value += value
	return(value)
}
print(myValue)	// 10
print(doubleValue(value: &myValue))	// 20, call by reference 하고싶은 변수에 & 붙여서(주소) 호출
print(myValue)	// 20

* 스위프트 함수는 1급객체이기 때문에 함수를 데이터 타입처럼 처리할 수 있음
함수를 상수또는 변수에 할당 가능

* 1급 객체(1급 시민) - 다음조건을 충족하는 객체
1) 변수에 저장할 수 있음
2) 매개변수로 전달할 수 있음
3) 리턴값으로 사용할 수 있음


* 클래스의 프로퍼티는 초기값이 있거나 init으로 초기화하거나 옵셔널 변수로 선언해야함, 옵셔널변수로 선언하면 nil로 자동 초기화됨

* 클래스 메서드(타입 메서드) 
클래스 내부에 함수를 선언할때 앞에 class 또는 static을 씀
클래스 메서드는 객체가 아닌 클래스가 호출 - 클래스.함수()
class 키워드로 만든 클래스 메서드는 자식클래스에서 오버라이드 가능

* init을 직접 만들면 디폴트생성자는 사라짐 - var kim: Man = Man()	// 오류

* designated initializer - 모든 프로퍼티를 다 초기화시키는 생성자

* computed property(연산 프로퍼티)는 setter가 없으면 get{ }은 생략할 수 있고 변경하지 않더라도 var로 선언해야 함
var manAge: Int {
   return age-1
}
setter가 있으면 get{ }은 생략할수 없음, setter의 매개변수명은 newValue가 기본, 이 경우 (newValue) 생략 가능
set {
   age = newValue + 1
}

* failable initializer(실패 가능한 생성자: init?)
ex)
let myImage: UIImage = UIImage(named: "apple.png")! 
apple.png 파일이 없으면 nil, 생성자는 init?(named: String) 옵셔널형이므로 사용하려면 언래핑해야 하므로 위의 예제에서 마지막에 !가 붙음


* swift에서 하위클래스는 단 하나의 부모클래스만 상속받을 수 있음, 나머지는 프로토콜 채택, 상속은 클래스만 가능

* convenience initializer - 다른 이니셜라이저를 이용해서 초기화 self.init(), 코드 중복을 방지함
convenience init(매개변수) {
     // 초기화 위임, self.init()		// self.init이 먼저 와야함
     // 자신의 초기화 코드
}


* initializer가 상속되는 경우
1. designated initializer와 convenience initializer 가 모두 상속
- 자식 클래스에 designated initializer가 없는 경우
- 자식 클래스에 초기화가 필요한 프로퍼티가 없을 경우
2. convenience initializer만 상속하는 경우
- 자식클래스에서 부모클래스의 designated initializer를 오버라이드 하는 경우

* swift 열거형 멤버에는 메서드도 가능함

* 열거형의 rawValue - enum 안의 속성들에는 rawValue가 0부터 자동으로 매겨짐
  String형 값을 갖는 열거형의 경우 rawValue에 String값이 할당되고, 값이 지정되지 않으면 case이름이 할당됨

* 연관값을 갖는 열거형
ex)  case intDate(Int,Int,Int)
     case stringDate(String)

swift에서 옵셔널은 연관값을 갖는 enum임
public enum Optional<Wrapped> {
     case none
     case some(Wrapped)
}

ex)
var x: Int? = 20
var y: Int? = Optional.some(10)
var z: Int? = Optional.none
var x1: Optional<Int> = 30
print(x, y, z, x1)  // Optional(20), Optional(10), nil, Optional(30)

let age: Int? = 30  // Optional(30)
switch age {
case .none:         // nil인 경우
    print("나이 정보가 없습니다")
case .some(let a) where a < 20:
    print("\(a)살 미성년자입니다")
case .some(let a) where a < 71:
    print("\(a)살 성인입니다")
default:
    print("경로우대입니다")
}   // 30살 성인입니다

** swift의 구조체 
- Memberwise initializer가 자동으로 만들어짐
- Array, Dictionary, Set은 제네릭 구조체
- nil도 구조체
- 구조체,열거형의 인스턴스는 value타입, 클래스의 인스턴스는 reference타입

* class 와 struct 의 차이점
클래스는 참조 타입, 구조체는 값 타입
class가 더 갖는 특징
- 상속이가능
- 타입캐스팅(is as as? as!)을 통해 실행 시점에 클래스 인스턴스의 타입을 검사하고 해석 가능
- deinitializer(deinit{})로 사용한 자원을 반환 가능
- 참조 카운팅을 통해 한 클래스 인스턴스를 여러곳에서 참조(사용) 가능

구조체를 쓰면 좋은경우
- 간단한 데이터 값들을 한데 묶어서 사용하는경우 
- 전체 덩어리 크기가 작은경우 
- 복사를 통해 전달해도 좋은경우
- 멀티 쓰레드 환경에서 더 안전
- 상속할 필요가 없는경우

* 옵셔널 체이닝
옵셔널 타입으로 정의된 값이 프로퍼티나 메서드를 가지고 있을 때, 다중 if를 쓰지 않고 간결하게 코드를 작성하기 위해 사용
ex)  cell.textLabel?.text - 성공하면 옵셔널값, 실패하면 nil 


* 기능은 같고 매개변수형만 다른 함수는 제네릭함수로 구현
func myPrint<T>(a: T, b: T) {	// 어느자료형을 넣어도 동작함
	print(b, a)
}

* 제네릭 구조체
struct Stack<T> {
    var items = [T]()
    mutating func push(_ item: T) {	// 구조체는 value타입이라 메서드안에서 프로퍼티의 값을 변경할 수 없지만 mutating 키워드를 쓰면 변경 가능
        items.append(item)
    }
    mutating func pop() -> T {
        return items.removeLast()
    }
}

var stackOfInt = Stack<Int>()	// 제네릭 구조체를 사용할 때 어떤자료형을 사용할지 선택해서 사용

* swift의 Array도 generic 구조체임, 구조체이므로 값 타입

* swift의 배열은 먼저 append로 방을 만든 후 값을 변경해야함


var x = [0,0,0,0,0]
var x = Array(repeating: 0, count: 5)
var x = [Int](repeating: 0, count: 5)

var num = [1,2,3]
num.append(contentsOf: [4,5,6])	// [1,2,3,4,5,6]
num.insert(9, at: 4)		// [1,2,3,4,9,5,6]
num = num + num			// [1,2,3,4,9,5,6,1,2,3,4,9,5,6]
num += [8,9]			// [1,2,3,4,9,5,6,1,2,3,4,9,5,6,8,9]

num.sort()			// 오름차순으로 정렬하여 원본 변경
num.sort(by: >)			// 내림차순으로 정렬하여 원본 변경
num.reverse()			// 반대로 정렬하여 원본 변경
num.sorted()			// 오름차순 정렬 결과를 리턴하고, 원본은 그대로
num.sorted(by: >)		// 내림차순 정렬 결과를 리턴하고, 원본은 그대로


* Subscript - 클래스, 구조체, 열거형이 컬렉션 멤버에게 빠르고 간단하게 접근하기 위한 문법
ex)
struct Num {
   let num = [1,2,3]
   subscript(i: Int) -> Int {
	return num[i]
   }
}
var n = Num()
print(n, n.num)			// Num(num: [1,2,3]) [1,2,3]
print(n[0], n[1], n[2])		// 1 2 3

* Dictionary 에서 키값으로 접근하면 value는 옵셔널로 나옴
number[2] = "둘", number.updateValue("둘", forKey: 2)		// value 수정
number[2] = nil, number.removeValue(forKey: 1)			// value 삭제	

for (cKor, cEng) in. colors {			// Tuple로 키와 값에 각각 접근
	print(cKor, cEng)
}					

var kColor = [String](color.keys)		// keys를 String Array로 변경


* 테이블뷰 에서 cellFroRowAt 함수를 정의할 때 
먼저 cell을 정의함
let cell = UITableViewCell(style: .default, reuseIdentifier: "myCell") 또는
let cell = tableView.dequeueReusableCell(withIdentifier: "myCell", for: indexPath) 등으로 정의
(일반적으로는 dequeueReusableCell 사용)

기존의 
cell.textLabel?.text = "\(indexPath.row)"
cell.detailTextLabel?.text = “” 

방법이

var content = cell.defaultContentConfiguration()

content.text = "\(indexPath.row)"
content.secondaryText = “”
content.image = UIImage(systemName: “star”)

cell.contentConfiguration = content 
로 사용법이 바뀜

* 테이블뷰의 데이터가 계속 바뀐다면 tableView.reloadData()를 써야함
UI관련 소스( reloadData() )는 메인 스레드에서 작성해야함 - 네트워크 통신은 백그라운드 스레드에서 처리되기때문에 아래 코드를 사용하여 메인에서 비동기 처리하도록 함
DispatchQueue.main.async {
      self.tableView.reloadData()
}

DispatchQueue - 앱의 기본 스레드 또는 백그라운드 스레드에서 작업실행을 순차또는 동시처리로 관리하는 개체

* closure 내부에서 클래스의 프로퍼티에 접근하려면 반드시 앞에 self. 을 붙여야함 

* capture와 escaping
- 둘다 클로저에서 사용되는 개념
capture : 클로저 내부에서 밖에 있는 scope의 instance를 참조하는 것
escaping : 클로저 외부에서 해당 클로저 자체를 참조하고 있는 것

* escaping closure
  class ViewModel {
      var completionhandler: (() -> Void)? = nil
    
      func fetchData(completion: @escaping () -> Void) {
          completionhandler = completion
      }
  }
- completion은 함수의 실행이 종료되기 전에 실행되지 않기 때문에 escaping 클로저, 다시말해 함수 밖(escaping)에서 실행되는 클로저  


* 어제 날짜 문자열로 얻기
let yesterday = Calendar.current.date(byAdding: .day, value: -1, to: Date())	// 어제날짜가 Date? 타입으로 리턴
let formatter = DateFormatter()
formatter.dateFormat = "yyyyMMdd"		// DateFormatter()로 날짜를 원하는 형식으로 바꿈(20220000)
let yesterdayDate = formatter.string(from: yesterday!)

* 버튼 둥글게 만들기 1
버튼 누르고 오른쪽 4번째 메뉴에서 User Defined Runtime Attributes 에 layer.cornerRadius를 추가하고 타입을 넘버로 바꾼뒤에 값 설정 (7정도)
또는
버튼 아웃렛 만들고 button.clipsToBounds = true
button.layer.cornerRadius = 0.5 * button.bounds.size.height
또는 커스텀 버튼(여러버튼에 적용할때, 스토리보드에서도 바꿀수있게)
버튼 클래스를 만들고 isRound 변수만들고 앞에는 @IBInspectable을 붙임
클래스 위에는 @IBDesignable을 써서 스토리보드에서 적용된모습을 실시간으로 확인할 수 있도록 함
변수는 연산프로퍼티를 적용
@IBDesignable		// 스토리보드에서 적용된 모습을 실시간으로 확인할 수 있음
class RoundButton: UIButton {
    @IBInspectable var isRound: Bool = false {		// 스토리보드에서도 변경할 수 있도록 함
        didSet {
            if isRound {
                self.layer.cornerRadius = self.frame.height / 2
            }
        }
    }
}

* 버튼 둥글게 만들기 2
버튼 아웃렛 변수 만들고 forEach로 설정 적용
[emailLoginButton, googleLoginButton, appleLoginButton].forEach {
            $0?.layer.borderWidth = 1
            $0?.layer.borderColor = UIColor.white.cgColor
            $0?.layer.cornerRadius = 30
 }




* 스위치(UISwitch)
액션함수 만들고 if sender.isOn { ON상태에 실행할 코드 } else { OFF상태에 실행할 코드 } 코드 작성

* 세그먼트 컨트롤(UISegmentedControl)
액션함수 만들고 if sender.selectedSegmentIndex == 0 { 첫번째 항목 } else { 두번째 항목 } 

* 동영상 재생 코드
let file: String? = Bundle.main.path(forResource: "파일이름", ofType: "mp4")
let url = NSURL(fileURLWithPath: file!)
let playerController = AVPlayerViewController()
let player = AVPlayer(url: url as URL)
playerController.player = player
self.present(playerController, animated: true)
player.play()

* 데이터의 사이즈에 맞게 라벨 크기 맞추기
self.라벨아웃렛이름.sizeToFit()	

* alert
let alert = UIAlertController(title: "할 일 등록", message: nil, preferredStyle: .alert)	// UIAlertController()로 알럿을 만들고
let registerButton = UIAlertAction(title: "등록", style: .default, handler: {})		// UIAlertAction()으로 버튼 만들기
let cancelButton = UIAlertAction(title: "취소", style: .cancel, handler: nil)
alert.addAction(registerButton)								// addAction()으로 버튼 넣기
alert.addAction(cancelButton)
self.present(alert, animated: true, completion: nil)		// present()로 알럿 띄우기

* reloadRows(at:with:) 
특정 행의 업데이트를 애니메이션 효과를 사용해서 표출 할 때 사용

* setEditing()
테이블뷰 편집모드 사용

* deinit
클래스 인스턴스가 메모리에서 해제될때 즉시 호출되는 함수

* xib로 만들 테이블 뷰 셀 띄우기
- TableVeiwController 파일에 
 let nibName = UINib(nibName: "셀 이름", bundle: nil)
 tableView.register(nibName, forCellReuseIdentifier: "셀 이름")
 
* static metatype - .self
String이 type이고 "Hello"가 인스턴스의 value
String.Type은 type이고 String.self가 metatype의 value
.self는 static metatype이고 compile time의 object type

* remote notification
- APNs 설정 필요 (Apple 개발자 등록 해야함)

* Swift Package Manager
- Xcode에서 cocoapod을 사용하지 않고 snapkit, alamofire 등 패키지 추가 가능 
  Snapkit 설치 시 Snapkit-Dynamic 빼고 Snapkit 하나만 설치하기(안그러면 command ld failed with a nonzero exit code 에러 뜸)

* UICollectionViewCell 에서 contentView.clipToBounds
- ubview들이 view의 bounds에 가둬질 수 있는 지를 판단하는 Boolean 값
- true로 설정하면 subview가 view의 경계를 넘어갈 시 잘리며 false로 설정하면 경계를 넘어가도 잘리지 않음

* UIImageView()의 contentMode 속성 3가지	ex) imageView.contentMode = .scaleAspectFit
- .scaleAspectFit : 비율을 유지하면서 뷰의 사이즈에 맞게 이미지를 늘리는 옵션, 이미지가 뷰를 꽉채우지 못해서 남는 부분은 투명처리 됨
- .scaleAspectFill : 비율을 유지하면서 뷰의 사이즈에 맞게 이미지를 꽉 채우는 옵션, 이미지의 어떤 부분은 잘려 보일수도 있음
- .scaleToFill : 전체 이미지가 다 나올 수 있도록 필요하다면 비율을 깨트리면서 뷰의 사이즈에 맞게 이미지를 꽉 채우는 옵션


--------------------------------------------------------------------------------------------------------------------------------------------------------
<<<<< 네트워킹 >>>>>

1. URL 만들기
let url = URL(string: "")
옵셔널이므로 바인딩해야함

2. URLSession 만들기
let session = URLSession(configuration: .default) 

3. URLSession 인스턴스에게 task 주기
func dataTask(with url: URL, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask
@ es

let task = session.dataTask(with: url) { data, response, error in

}

4. task 시작하기( task.resume() )
3번 코드 다음줄에 task.resume() 작성


* App Transport Security(ATS)
- ios 9부터 외부 네트워크와 관련된 보안 규칙인 신설
- 네트워크 객체를 사용해서 SSL 보안 프로토콜을 사용하지 않는 네트워크에 접속하려면 info.plist 파일에 설정을 추가해주어야 함
- SSL 보안 프로토콜이 적용된 네트워크는 접속시 https:// 를 사용 ( 적용안된 네트워크는 http:// )
- 서버 도메인이 https:// 로 시작하면 ATS 보안을 적용하지 않아도 됨
- http:// 로 시작하면 반드시 ATS 보안을 적용하여야 함

ATS를 위해 info.plist 수정 - App Transport Security Settings를 추가하고 하위항목에 Allow Arbitrary Loads를 추가한 뒤 Value를 Yes로 변경 
(좋은 방법은 아님, 애플에서는 https사용 권장)

* JSON 파싱 
JSON에서 필요한 데이터를 구조체로 만들어서 사용

* Request Get 방식과 Post방식의 차이
- Get 방식은 URL에 파라미터값이 표시됨, Post는 전달해야하는 파라미터를 URL안에 넣지 않고 body에 넣기때문에 노출되지않음(id,password 에 많이 사용)
- URL에는 보낼수있는 데이터의 양에 한계가있지만 body에 넣는 값은 훨씬더 많이 가능

* GCD (Grand Central Dispatch)
- 사용자가 Dispatch Queue에 작업들을 넣어주면 운영체제가 알아서 적절한 쓰레드에 작업을 분배해준다.
- 네트워크 작업은 백그라운드 쓰레드에서 동작하게되는데, UI관련 작업은 반드시 메인 쓰레드에서 실행되어야하므로 DispatchQueue 코드를 통해 메인에서 동작하도록 따로 빼줘야 함.


-----------------------------------------------------------------------------------------------------------------------------------
< Storyboard 없이 코드 + xib >
* 세팅하기
storyboard 파일 삭제
Info.plist 에서 Storyboard Name 항목 삭제
프로젝트 general에서 Main Interface 항목 Main 텍스트 지우기
SceneDelegate.swift 파일 수정

view.swift 파일과 같은이름으로 .xib파일을 만든 뒤에 File's Owner에서 커스텀클래스와 File's Owner클래스를 연결(밑에 view까지 연결시키면 에러남)
view.swift 파일에 init 메서드 작성

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        // self.customInit() 또는 self.alternativeCustomInit() 으로 호출
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        // self.customInit() 또는 self.alternativeCustomInit() 으로 호출
    }

    //방법 1. loadNibNamed
    func customInit() {
        if let view = Bundle.main.loadNibNamed("MyCustomView", owner: self, options: nil)?.first as? UIView {
            view.frame = self.bounds
            addSubview(view)
        }
    }
    
    //방법 2. UINib 생성 후 instantiate
    func alternativeCustomInit() {
        if let view = UINib(nibName: "MyCustomView", bundle: nil).instantiate(withOwner: self, options: nil).first as? UIView {
            view.frame = self.bounds
            addSubview(view)
        }
    }

이후 ViewController에서 
    let myCustomView = MyCustomView(frame: CGRect(x: 0, y: 0, width: view.bounds.width, height: view.bounds.height))
    view.addSubview(myCustomView)
   

* KingFisher
URL 이미지를 편리하게 표시할수있는 오픈소스 
